1- Intro
2- Problem & why docker
3- Setup node js application
4- Dockerfile
5- images & containers
6- docker optimizition (copy package.json before the source code to avoid run npm install in each build)
7- docker hot reload (using docker volume)
8- docker volumes (bind mount)
    docker run --name node-express-app-container -v ${pwd}:/app -p 4000:4000 -d node-express-app ==> two way binding
    docker run --name node-express-app-container -v ${pwd}:/app:ro -p 4000:4000 -d node-express-app ==> add ro option to avoid binding from container to local repo

    anonymos volume
    docker run --name node-express-app-container -v ${pwd}:/app:ro -v /app/node_modules -p 4000:4000 -d node-express-app

9- docker compose 
10- Environment variables
11- docker environments(dev, prod, testing)
12- multi-stage Dockerfile (using args to check the environment before building image)
    ARG NODE_ENV
    RUN if [ "${NODE_ENV}" = "production" ]; \
        then npm install --only=production; \
        else npm install; \
        fi

13- docker with mongodb and nodejs
14- docker with mongodb
15- docker with redis
16- docker with nginx
17- docker with postgreSQL
18- docker with laravel
19- setup docker on AWS EC2
20- deploy application on AWS
21- push image to dockerhub
22- load balancing with nginx
23- Automate docker (using watchtower)
24- How CI/CD works
25- Docker orchestration
    - deploy
    - scaling
    - networking
    - errors
    - updates (rolling update)
26- docker swarm
    - node (worker node and master node)
    - stack
27- Rolling update

PS: YAML syntax and bash scripting